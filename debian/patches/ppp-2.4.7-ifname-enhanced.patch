--- a/pppd/main.c
+++ b/pppd/main.c
@@ -737,6 +737,31 @@
     else
 	slprintf(ifname, sizeof(ifname), "%s%d", PPP_DRV_NAME, ifunit);
     info("Using interface %s", ifname);
+    if (req_ifname[0] != '\0') {
+        char *ptr;
+        ptr = strchr(req_ifname, 'N');
+
+        if (ptr == NULL) {
+            slprintf(ifname, sizeof(ifname), "%s", req_ifname);
+            info("Using ifname as it is: '%s'", ifname);
+        } else {
+            int index=0;
+            char req_ifname_t[MAXIFNAMELEN];
+
+            index = (int)(ptr - req_ifname);
+            memset(req_ifname_t, 0, MAXIFNAMELEN); // force cleanup
+            strncpy(req_ifname_t, req_ifname, index);
+
+            // Copy the part of the req_ifname which doesn't contains "N"
+            strncpy(req_ifname_t, req_ifname, index);
+
+            slprintf(ifname, sizeof(ifname), "%s%d", req_ifname_t, ifunit);
+            info("Using ifname in format ifnameN. Set to new name: '%s'", ifname);
+        }
+    }
+    else
+       slprintf(ifname, sizeof(ifname), "%s%d", PPP_DRV_NAME, ifunit);
+    info("Using interface %s", ifname);
     script_setenv("IFNAME", ifname, iskey);
     if (iskey) {
 	create_pidfile(getpid());	/* write pid to file */
--- a/pppd/options.c
+++ b/pppd/options.c
@@ -206,6 +206,10 @@
     { "kdebug", o_int, &kdebugflag,
       "Set kernel driver debug level", OPT_PRIO },
 
+    { "ifname", o_string, req_ifname,
+      "Set PPP interface name",
+      OPT_PRIO | OPT_PRIV | OPT_STATIC, NULL, MAXIFNAMELEN },
+
     { "nodetach", o_bool, &nodetach,
       "Don't detach from controlling tty", OPT_PRIO | 1 },
     { "-detach", o_bool, &nodetach,
--- a/pppd/sys-linux.c
+++ b/pppd/sys-linux.c
@@ -654,6 +654,11 @@
 	if (x == 0 && req_ifname[0] != '\0') {
 		struct ifreq ifr;
 		char t[MAXIFNAMELEN];
+	    /* original code */
+	    char *ptr;
+	    ptr = strchr(req_ifname, 'N');
+
+	    if (ptr == NULL) {
 		memset(&ifr, 0, sizeof(struct ifreq));
 		slprintf(t, sizeof(t), "%s%d", PPP_DRV_NAME, ifunit);
 		strncpy(ifr.ifr_name, t, IF_NAMESIZE);
@@ -663,6 +668,38 @@
 		    error("Couldn't rename interface %s to %s: %m", t, req_ifname);
 		else
 		    info("Renamed interface %s to %s", t, req_ifname);
+	    /* end of original code */
+	    }
+	    else {
+
+		int index=0;
+		char t2[MAXIFNAMELEN];
+		char req_ifname_t[MAXIFNAMELEN];
+
+		index = (int)(ptr - req_ifname);
+
+		// Copy the part of the req_ifname which doesn't contains "N"
+		memset(req_ifname_t, 0, MAXIFNAMELEN); // force cleanup
+		strncpy(req_ifname_t, req_ifname, index);
+
+		memset(&ifr, 0, sizeof(struct ifreq));
+
+		slprintf(t, sizeof(t), "%s%d", PPP_DRV_NAME, ifunit);
+		strncpy(ifr.ifr_name, t, IF_NAMESIZE);
+
+		slprintf(t2, sizeof(t2), "%s%d", req_ifname_t, ifunit);
+		strncpy(ifr.ifr_newname, t2, IF_NAMESIZE);
+
+		info("Found ifname in format ifnameN. Using %s as interface", t2);
+
+		x = ioctl(sock_fd, SIOCSIFNAME, &ifr);
+		if (x < 0)
+		    error("Couldn't rename interface %s to %s: %m", t, t2);
+		else
+		    info("Renamed interface %s to %s", t, t2);
+
+	    }
+
 	}
 
 	return x;
